version: "3.9"

services:
  # Core messaging infrastructure
  nats:
    image: nats:2.10
    command: ["-js", "-m", "8222"]
    ports: ["4222:4222", "8222:8222"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # NATS stream initialization (runs once)
  nats-init:
    build: ./repos/at-nats-init
    depends_on:
      - nats
    environment:
      - NATS_URL=nats://nats:4222
      - STREAM_NAME=trading-events
    restart: "no"

  # Gateway service (webhooks and market data ingestion)
  gateway:
    build: ./repos/at-gateway
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - API_KEY_HMAC_SECRET=${API_KEY_HMAC_SECRET:-prod-secret}
      - PORT=8001
      - LOG_LEVEL=INFO
      # v1.0 feature flags - production ready
      - FF_TV_SLICE=true
      - FF_ENHANCED_LOGGING=${FF_ENHANCED_LOGGING:-false}
      - FF_CIRCUIT_BREAKER=true
      - FF_METRICS_COLLECTION=true
      - FF_RATE_LIMITING=true
    ports: ["8001:8001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # MCP Agent service (trading strategy agent)
  agent:
    build: ./repos/at-agent-mcp
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - PORT=8002
      - LOG_LEVEL=INFO
      - STRATEGY_TYPE=momentum
      - RISK_LIMIT=0.02
    ports: ["8002:8002"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Meta-agent service (multi-agent orchestration) - SPRINT 2 IMPLEMENTED
  meta-agent:
    build: ./repos/at-meta-agent
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - PORT=8003
      - LOG_LEVEL=INFO
      - VOTING_STRATEGY=confidence_weighted
      - MIN_CONFIDENCE=0.7
    ports: ["8003:8003"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Execution simulator (trade execution)
  exec-sim:
    build: ./repos/at-exec-sim
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - PORT=8004
      - LOG_LEVEL=INFO
    ports: ["8004:8004"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Backtester service (strategy validation) - SPRINT 2 IMPLEMENTED
  backtester:
    build: ./repos/at-backtester
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - PORT=8005
      - LOG_LEVEL=INFO
    ports: ["8005:8005"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Broker adapters service (real trading) - SPRINT 2 IMPLEMENTED
  broker-adapters:
    build: ./repos/at-broker-adapters
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - PORT=8006
      - LOG_LEVEL=INFO
      - ADAPTER_MODE=paper  # paper, ib, alpaca
    ports: ["8006:8006"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Strategy manager service (dynamic strategy loading)
  strategy-manager:
    build: ./repos/at-strategy-manager
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - PORT=8007
      - LOG_LEVEL=INFO
      - STRATEGIES_DIR=/app/plugins
    ports: ["8007:8007"]
    volumes:
      - "./repos/at-strategy-manager/at_strategy_manager/plugins:/app/plugins"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Audit trail service (compliance) - DOCUMENTED IN SYSTEM OVERVIEW
  audit-trail:
    build: ./repos/at-audit-trail
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - NATS_STREAM=trading-events
      - PORT=8009
      - LOG_LEVEL=INFO
    ports: ["8009:8009"]
    volumes:
      - "audit-data:/app/audit_logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Agent orchestrator service (GPT/Claude agents) - v1.0 NEW
  agent-orchestrator:
    build: ./repos/at-agent-orchestrator
    depends_on:
      - nats-init
      - redis
    environment:
      - NATS_URL=nats://nats:4222
      - REDIS_URL=redis://redis:6379
      - PORT=8010
      - LOG_LEVEL=INFO
      # AI API keys (set via environment or secrets)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      # v1.0 feature flags
      - FF_AGENT_GPT=true
      - FF_ENHANCED_LOGGING=${FF_ENHANCED_LOGGING:-false}
      - FF_CIRCUIT_BREAKER=true
      # Agent configuration
      - AGENT_TIMEOUT_SEC=30
      - MAX_CONTEXT_LENGTH=8192
    ports: ["8010:8010"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Output manager service (notifications & paper trading) - v1.0 NEW
  output-manager:
    build: ./repos/at-output-manager
    depends_on:
      - nats-init
    environment:
      - NATS_URL=nats://nats:4222
      - PORT=8008
      - LOG_LEVEL=INFO
      # External service credentials (set via environment or secrets)
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-}
      # v1.0 feature flags
      - FF_OUTPUT_SLACK=true
      - FF_OUTPUT_TELEGRAM=true
      - FF_EXEC_PAPER=true
      - FF_ENHANCED_LOGGING=${FF_ENHANCED_LOGGING:-false}
      # Delivery configuration
      - DELIVERY_TIMEOUT_SEC=10
      - RETRY_ATTEMPTS=3
      - RETRY_DELAY_SEC=2
    ports: ["8008:8008"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for feature store and caching
  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    command: redis-server --appendonly yes
    volumes:
      - "redis-data:/data"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Monitoring Stack
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    ports: ["9090:9090"]
    volumes:
      - "./repos/at-observability/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "prometheus-data:/prometheus"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - "grafana-data:/var/lib/grafana"
      - "./repos/at-observability/grafana-provisioning:/etc/grafana/provisioning"
      - "./repos/at-observability/grafana_dashboards:/var/lib/grafana/dashboards"
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health && echo 'ready'"]
      interval: 10s
      retries: 30
    depends_on:
      - prometheus

  # NEO Control Center (Web GUI)
  control-center:
    build: ./repos/at-control-center
    ports: ["3001:3001"]
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://gateway:8001
      - NEXT_PUBLIC_GRAFANA_URL=http://grafana:3000
      - NEXT_PUBLIC_PROMETHEUS_URL=http://prometheus:9090
      - NEXT_PUBLIC_WS_URL=ws://gateway:8001
    depends_on:
      - gateway
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    ports: ["9100:9100"]
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/host:ro'
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/host'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports: ["8080:8080"]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    ports: ["9121:9121"]
    environment:
      REDIS_ADDR: redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  redis-data:
  audit-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: neo_production_default
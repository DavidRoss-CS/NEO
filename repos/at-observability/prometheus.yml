# Prometheus Configuration
# Agentic Trading Architecture - Metrics Collection

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    environment: 'development'
    region: 'us-east-1'
    cluster: 'trading-dev'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093
      timeout: 10s
      api_version: v2

# Load rules once and periodically evaluate them
rule_files:
  - '/etc/prometheus/alerts/*.yml'
  - '/etc/prometheus/recording_rules/*.yml'

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
        labels:
          service: 'prometheus'
          component: 'monitoring'

  # Gateway service
  - job_name: 'gateway'
    static_configs:
      - targets: ['at-gateway:8001']
        labels:
          service: 'at-gateway'
          component: 'ingress'
    metrics_path: '/metrics'
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Agent MCP service
  - job_name: 'agent-mcp'
    static_configs:
      - targets: ['at-agent-mcp:8002']
        labels:
          service: 'at-agent-mcp'
          component: 'agent'
    metrics_path: '/metrics'
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Agent Orchestrator service (v1.0.0)
  - job_name: 'agent-orchestrator'
    static_configs:
      - targets: ['agent-orchestrator:8010']
        labels:
          service: 'at-agent-orchestrator'
          component: 'orchestrator'
    metrics_path: '/metrics'
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Output Manager service (v1.0.0)
  - job_name: 'output-manager'
    static_configs:
      - targets: ['output-manager:8008']
        labels:
          service: 'at-output-manager'
          component: 'delivery'
    metrics_path: '/metrics'
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'

  # Execution simulator
  - job_name: 'execution'
    static_configs:
      - targets: ['at-exec-sim:8004']
        labels:
          service: 'at-exec-sim'
          component: 'execution'
    metrics_path: '/metrics'

  # NATS monitoring
  - job_name: 'nats'
    static_configs:
      - targets: ['nats-exporter:7777']
        labels:
          service: 'nats'
          component: 'messaging'
    metrics_path: '/metrics'

  # NATS JetStream monitoring
  - job_name: 'nats-jetstream'
    static_configs:
      - targets: ['nats:8222']
        labels:
          service: 'nats-jetstream'
          component: 'messaging'
    metrics_path: '/metrics'
    scheme: http

  # Redis monitoring
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
        labels:
          service: 'redis'
          component: 'cache'
    metrics_path: '/metrics'

  # Node exporter for host metrics
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']
        labels:
          component: 'infrastructure'
    relabel_configs:
      - source_labels: [__address__]
        regex: '(.+):9100'
        target_label: host
        replacement: '${1}'

  # Docker containers via cAdvisor
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
        labels:
          component: 'containers'
    metrics_path: '/metrics'
    relabel_configs:
      # Extract container name
      - source_labels: [container_label_com_docker_compose_service]
        target_label: service
      # Extract compose project
      - source_labels: [container_label_com_docker_compose_project]
        target_label: project

  # Blackbox exporter for endpoint monitoring
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - http://at-gateway:8001/healthz
          - http://agent-orchestrator:8010/healthz
          - http://output-manager:8008/healthz
          - http://at-orchestrator:9090/healthz
          - http://at-mcp:8003/health
        labels:
          component: 'endpoints'
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: endpoint
      - target_label: __address__
        replacement: blackbox-exporter:9115

# Service discovery for dynamic environments (optional)
# Uncomment for Kubernetes deployment
# - job_name: 'kubernetes-pods'
#   kubernetes_sd_configs:
#     - role: pod
#   relabel_configs:
#     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
#       action: keep
#       regex: true
#     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
#       action: replace
#       target_label: __metrics_path__
#       regex: (.+)
#     - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
#       action: replace
#       regex: ([^:]+)(?::\d+)?;(\d+)
#       replacement: $1:$2
#       target_label: __address__
#     - source_labels: [__meta_kubernetes_namespace]
#       target_label: kubernetes_namespace
#     - source_labels: [__meta_kubernetes_pod_name]
#       target_label: kubernetes_pod_name
#     - source_labels: [__meta_kubernetes_pod_label_app]
#       target_label: app

# Remote write for long-term storage (optional)
# Uncomment for production
# remote_write:
#   - url: "http://cortex:9009/api/v1/push"
#     queue_config:
#       max_samples_per_send: 10000
#       batch_send_deadline: 30s
#       min_backoff: 30ms
#       max_backoff: 100ms
#     write_relabel_configs:
#       # Drop high cardinality metrics
#       - source_labels: [__name__]
#         regex: 'go_memstats_.*'
#         action: drop